using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.InputSystem;

public class PlayerController : MonoBehaviour
{
    Animator animator;
    public GameObject player;
    public GameObject door;
    // Rigidbody of the player.
    private Rigidbody rb;
    

    // Movement along X and Y axes.
    private float movementX;
    private float movementY;

    // Speed at which the player moves.
    public float speed = 0;

    public float jumpForce = 5f;

    // Flag to check if the player is on the ground.
    private bool isGrounded = true;

    // Start is called before the first frame update.
    void Start()
    {
        animator=GetComponent<Animator>();
        
        rb = GetComponent<Rigidbody>();
        rb.linearDamping = 5f; // Adjust this value as needed
        // Get and store the Rigidbody component attached to the player.
        rb = GetComponent<Rigidbody>();
    }

    // This function is called when a move input is detected.
    void OnMove(InputValue movementValue)
    {
        // Convert the input value into a Vector2 for movement.
        Vector2 movementVector = movementValue.Get<Vector2>();
        
        // Store the X and Y components of the movement.
        movementX = movementVector.x;
        movementY = movementVector.y;
        
    }

    void OnJump(InputValue jumpValue)
    {
        if (jumpValue.isPressed && isGrounded)
        {
            // Apply an upward impulse force to jump.
            rb.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);
            isGrounded = false; // Prevent double jumping
        }
    }

    // FixedUpdate is called once per fixed frame-rate frame.
    private void FixedUpdate()
    {
        // Create a 3D movement vector using the X and Y inputs.
        Vector3 movement = new Vector3(movementX, 0.0f, movementY);

        if (movement.sqrMagnitude > 0.001f) // Using sqrMagnitude for efficiency.
        {
            // Calculate the new rotation facing the movement direction.
            Quaternion newRotation = Quaternion.LookRotation(movement, Vector3.up);
            transform.rotation = newRotation;
        }

        // Apply force to the Rigidbody to move the player.
        rb.AddForce(movement * speed);

        if (rb.linearVelocity.magnitude > 0.1f) // Adjust threshold if needed
        {
            animator.SetBool("isRunning", true);
        }
        else
        {
            animator.SetBool("isRunning", false);
        }
    }

    private void OnCollisionStay(Collision collision)   
    {

        // Make sure the ground object has the tag "Ground"
        if (collision.gameObject.CompareTag("Ground"))
        {
            isGrounded = true;
        } else if (collision.gameObject.CompareTag("Enemy"))
        {
            
            player.transform.position = new Vector3(0,0,0);

        }
        else if (collision.gameObject.CompareTag("Lever"))
        {

            door.transform.position = new Vector3(119, 20, -4);
            

        }
    }
}
